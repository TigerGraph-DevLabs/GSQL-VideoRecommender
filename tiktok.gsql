USE GRAPH tiktok

CREATE QUERY algoLouvain(INT iter1 = 10, INT iter2 = 10, INT iter3 = 10, INT split = 10, INT outputLevel = 0) FOR GRAPH tiktok {
/*
 * Louvain Method with Parallelism and Refinement
 * https://arxiv.org/pdf/1304.4453
 * The minimum label heuristics are implemented: https://doi.org/10.1016/j.parco.2015.03.003
 * iter: There are three phases in the algorithm -- move, merge and refine. Their max number of iterations are set by iter1, iter2, iter3 respectively.
 * split: To save memory, split number is 10 by default. When the split number is larger, the query is closer to sequential Louvain Method, which is slower. \
 * When the split number is 1, the query is parallel, but requires more memory. 
 * outputLevel: 0, only list number; 1, also list members
 */
        TYPEDEF TUPLE <INT csize, INT number> ClusterNum;
        TYPEDEF TUPLE <VERTEX node, INT cid, FLOAT deltaQ> vDeltaQ;
        HeapAccum<vDeltaQ>(1, deltaQ DESC, cid ASC) @largestDeltaQ;   # if deltaQ is the same, select the one with mininal vid 
        MapAccum<INT, FLOAT> @@totIncidentCluster;   # sun of weight incident to clusters
        MapAccum<INT, INT> @@clusterSizes;                # size of a cluster
        MapAccum<INT, FLOAT> @weightToCluster;  # weight from one vertex incident to that cluster
        SumAccum<FLOAT> @@totalWeight;   # total weight of all edges
        SumAccum<FLOAT> @weight;          # total weight incident to this vertex
        SumAccum<FLOAT> @cweight;       # total weight incident to this aggregate vertex
        SumAccum<INT> @uid;        # which vertex it belongs to
        SumAccum<INT> @cid;        # which cluster it belongs to
        SumAccum<INT> @vid;        # internal id
        SumAccum<FLOAT> @deltaQ;         # contribution to the modularity
        SumAccum<FLOAT> @@modularity;
        SumAccum<FLOAT> @@modularity2;
        MapAccum<INT, MapAccum<INT, FLOAT>> @@weightToClusterMap;   # calculate edges between communities 
        MapAccum<INT, SetAccum<INT>> @@moveComm; # map of communities that changed its community id
        MapAccum<INT, MinAccum<VERTEX>> @@representMap;
        SetAccum<VERTEX> @@representSet;
        MapAccum<INT, FLOAT> @@vertexMap;
        MapAccum<INT, MapAccum<INT, FLOAT>> @@edgeMap;
        HeapAccum<ClusterNum>(100, csize ASC) @@clusterDist;
        MapAccum<INT, INT> @@clusterMap;
        MapAccum<INT, ListAccum<INT>> @@clusterMembers;
        FLOAT last_modularity = 0;
        FLOAT last_modularity2 = 0;
        INT iteration;
        INT Iter1; 
        FLOAT epsilon = 0.0001;
        INT iteration2;
        INT partitions;
        INT loop;
        INT debug = 0;  # debug: 0, no modularity info; 1, show debug log; 2, modularity for each iteration
        
        partitions = split;
        CASE WHEN split < 1 THEN
                partitions = 1;
        END;
        
# Initialize: count edges and set a unique cluster ID for each vertex
        Start (ANY) = {user.*};
        S (ANY) = SELECT s 
            FROM Start:s -((following|reverse_following):e)-> :t
            ACCUM @@totalWeight += 1,
                  s.@weight += 1
            POST-ACCUM s.@vid = getvid(s),
                       s.@uid = s.@vid,
                       s.@cid = s.@vid;  # Label each vertex with its own internal ID
                       
# Special first iteration of Phase 1
        iteration = 1;
        S = SELECT s 
            FROM Start:s -((following|reverse_following):e)-> :t
            WHERE s.@cid > t.@cid
            ACCUM s.@largestDeltaQ += vDeltaQ(t, t.@cid, 1 - (2 * s.@weight * s.@weight/ @@totalWeight))
                  # weightToCluster is just 1
            POST-ACCUM INT bestCluster = s.@largestDeltaQ.top().cid,
                       IF s.@largestDeltaQ.size() > 0 and s.@largestDeltaQ.top().deltaQ > 0 and s.@cid != bestCluster THEN 
                               s.@cid = bestCluster
                       END,
                       s.@largestDeltaQ.clear();
        
        S = SELECT s
            FROM Start:s-((following|reverse_following):e)-:t
            WHERE s.@cid == t.@cid
            ACCUM @@modularity += 1 - s.@weight * t.@weight / (@@totalWeight);
        @@modularity = @@modularity / @@totalWeight;                      
        // PRINT iteration AS Phase1Iter, @@modularity;
        log(debug > 0, "[redrain]#move", iteration, @@modularity);
        
# Phase 1 -- Move
# For each vertex, calculate the change in modularity FROM adding it to each of the nearby clusters
# Add vertex to cluster with highest positive change in modularity
# Repeat the above until no vertices change cluster anymore
        S = SELECT s 
            FROM Start:s
            ACCUM @@totIncidentCluster += (s.@cid -> s.@weight); 
              
        iteration = 1;
        Iter1 = iter1 - 1;
              
        WHILE (iteration < 2 OR @@modularity - last_modularity > epsilon) LIMIT Iter1 DO
                iteration = iteration + 1;
                loop = 0;
                WHILE (loop < partitions) DO 
                        S = SELECT s 
                            FROM Start:s -((following|reverse_following):e)-> :t
                            WHERE s.@uid % partitions == loop    # for different split
                                  # At least one cluster not singlet(a cluster on its own). If both clusters are singlets, consider only when the label of target is smaller to avoid swap
                                  AND (( abs(s.@weight - @@totIncidentCluster.get(s.@cid)) > epsilon   # s is not a singlet 
                                  OR abs(t.@weight - @@totIncidentCluster.get(t.@cid)) > epsilon )     # or t is not a singlet
                                  OR (abs(s.@weight - @@totIncidentCluster.get(s.@cid)) < epsilon      # s is a singlet 
                                  AND abs(t.@weight - @@totIncidentCluster.get(t.@cid)) < epsilon      # t is also a singlet
                                  AND s.@cid > t.@cid) )                                               # consider only when target label is smaller
                            ACCUM s.@weightToCluster += (t.@cid -> 1)
                            POST-ACCUM INT bestCluster = s.@cid,
                                       FLOAT maxDeltaQ = 0.0,
                                       FLOAT deltaQ_new = 0.0,
                                       FOREACH (cluster, weightToC) IN s.@weightToCluster DO   #would be better if this can be distributed
                                               FLOAT incident = @@totIncidentCluster.get(cluster),
                                               deltaQ_new = weightToC - 2 * incident * s.@weight/ @@totalWeight,
                                               IF deltaQ_new > maxDeltaQ OR (abs(deltaQ_new - maxDeltaQ) < epsilon AND cluster < bestCluster) THEN   # when deltaQ_new is equal to maxDeltaQ, and the cluster label is smaller, also change 
                                                       maxDeltaQ = deltaQ_new,
                                                       bestCluster = cluster
                                               END
                                       END,
                                       IF s.@cid != bestCluster THEN 
                                               @@totIncidentCluster += (s.@cid -> (-1 * s.@weight)),
                                               @@totIncidentCluster += (bestCluster -> s.@weight),
                                               s.@cid = bestCluster
                                       END,
                                       s.@weightToCluster.clear();
                        loop = loop + 1;
                END;
                last_modularity = @@modularity;
                @@modularity = 0;
                T1 = SELECT s
                     FROM Start:s-((following|reverse_following):e)-:t
                     WHERE s.@cid == t.@cid
                     ACCUM @@modularity += 1 - s.@weight * t.@weight / (@@totalWeight);
                @@modularity = @@modularity / @@totalWeight;                      
                // PRINT iteration AS Phase1Iter, @@modularity;
                log(debug > 0, "[redrain]#move", iteration, @@modularity);
        END;
        
# Phase 2 --  Merge     
        iteration2 = 0;
        WHILE (iteration2 < 2 OR @@modularity2 - last_modularity2 > epsilon) LIMIT iter2 DO
                iteration2 = iteration2 + 1;
                Start = SELECT s
                        FROM Start:s
                        ACCUM s.@uid = s.@cid;      
                # Select the vertices with minimal internal id to represent the coarsened graph
                Start = SELECT s
                        FROM Start:s 
                        ACCUM @@representMap += (s.@cid -> s);
        
                FOREACH (key, value) IN @@representMap DO
                        @@representSet += value;                       
                END;      
                represent = {@@representSet};
                @@representMap.clear();
                @@representSet.clear();
                log(debug > 0, "[redrain]#2_merge", represent.size()); #@@clusterSizes.size());
            # Get @cweight from totalIncident
                represent = SELECT s
                            FROM represent:s
                            ACCUM s.@cweight = @@totIncidentCluster.get(s.@uid),
                                  @@clusterSizes += (s.@cid -> 1);
                log(debug > 1, "[redrain]#2_merge", @@weightToClusterMap.size());
                iteration = 0;
                last_modularity = 0;
                @@modularity = 0;
     
                WHILE (iteration < 2 OR @@modularity - last_modularity > epsilon) limit iter1 DO
                        iteration = iteration + 1;
        
                        # Calculate edge incident from vertex to cluster in coarsened graph; change every interation
                        S = SELECT s
                            FROM Start:s -((following|reverse_following):e)-:t
                            WHERE s.@cid != t.@cid AND @@totIncidentCluster.get(s.@uid) > 0 AND @@totIncidentCluster.get(t.@cid) > 0   #@@totIncidentCluster keeps changing, can be 0
                            ACCUM @@weightToClusterMap += (s.@uid -> (t.@cid -> 1));  # from s, incident to some clusters. Not consider the same cluster
                        represent = SELECT s 
                                    FROM represent:s
                                    POST-ACCUM INT bestCluster = s.@cid,
                                               FLOAT maxDeltaQ = 0.0,
                                               FLOAT deltaQ_new = 0.0,
                                               FOREACH (cluster, weightToC) IN @@weightToClusterMap.get(s.@uid) DO 
                                                       FLOAT incident = @@totIncidentCluster.get(cluster),
                                                       IF @@clusterSizes.get(s.@cid) == 1 AND @@clusterSizes.get(cluster) == 1 AND s.@cid < cluster THEN
                                                               CONTINUE
                                                       END,
                                                       deltaQ_new = weightToC - 2 * incident * s.@cweight/ @@totalWeight, #total weight should be the same
                                                       IF deltaQ_new > maxDeltaQ OR abs(deltaQ_new - maxDeltaQ) < epsilon AND cluster < bestCluster THEN      # new cluster is smaller then the current best cluster
                                                               maxDeltaQ = deltaQ_new,
                                                               bestCluster = cluster
                                                       END
                                               END,
                                               IF s.@cid != bestCluster THEN
                                                       @@totIncidentCluster += (s.@cid -> (-1 * s.@cweight)),
                                                       @@totIncidentCluster += (bestCluster -> s.@cweight),
                                                       @@moveComm += (s.@uid -> bestCluster),
                                                       @@clusterSizes += (s.@cid -> -1),
                                                       @@clusterSizes += (bestCluster -> 1),
                                                       s.@cid = bestCluster
                                               END;
                        log(debug > 1, "[redrain]#2_merge", @@weightToClusterMap.size()); 
                        @@weightToClusterMap.clear();
                   
                        log(debug > 1, "[redrain]#2_move:", @@moveComm.size());
                        # move nodes
                        S = SELECT s
                            FROM Start:s
                            WHERE @@moveComm.containsKey(s.@uid)
                            POST-ACCUM FOREACH v IN @@moveComm.get(s.@uid) DO
                                               s.@cid = v
                                       END;
                        @@moveComm.clear();
    
                        last_modularity = @@modularity;           
                        @@modularity = 0;
                
                        S = SELECT s
                            FROM Start:s-((following|reverse_following):e)-:t
                            WHERE s.@cid == t.@cid
                            ACCUM @@modularity += 1 - s.@weight * t.@weight / (@@totalWeight);
                            @@modularity = @@modularity / @@totalWeight;
                            // PRINT iteration AS Phase1Iter, @@modularity;
                        log(debug > 0, "[redrain]#2_move", iteration, @@modularity);
                END;
        
                S = SELECT s
                    FROM represent:s
                    ACCUM s.@cweight = 0;
                @@clusterSizes.clear();
        
                last_modularity2 = @@modularity2;
                @@modularity2 = @@modularity;
                // PRINT iteration2 AS Phase2Iter, @@modularity2;
                log(debug > 0, "[redrain]#2_merge", iteration2, @@modularity2);
                                      
        END;
        
# Phase 3 -- Refinement
        iteration = 0;
        @@modularity = 0;
        WHILE (iteration < 2 OR @@modularity - last_modularity > epsilon) LIMIT iter3 DO
                iteration = iteration + 1;
                S = SELECT s 
                    FROM Start:s -((following|reverse_following):e)-> :t
                    WHERE abs(s.@weight - @@totIncidentCluster.get(s.@cid)) > epsilon OR abs(t.@weight - @@totIncidentCluster.get(t.@cid)) > epsilon OR (abs(s.@weight - @@totIncidentCluster.get(s.@cid)) < epsilon AND abs(t.@weight - @@totIncidentCluster.get(t.@cid)) < epsilon AND s.@cid > t.@cid)   # at least one cluster not only itself, or use smaller label
                    ACCUM s.@weightToCluster += (t.@cid -> 1)
                    POST-ACCUM
                            INT bestCluster = s.@cid,
                            FLOAT maxDeltaQ = 0.0,
                            FLOAT deltaQ_new = 0.0,
                            FOREACH (cluster, weightToC) IN s.@weightToCluster DO   #would be better if this can be distributed
                                    FLOAT incident = @@totIncidentCluster.get(cluster),
                                    deltaQ_new = weightToC - 2 * incident * s.@weight/ @@totalWeight,
                                    IF deltaQ_new > maxDeltaQ OR (abs(deltaQ_new - maxDeltaQ) < epsilon AND cluster < bestCluster) THEN   # when deltaQ_new is equal to maxDeltaQ, and the cluster label is smaller, also change 
                                            maxDeltaQ = deltaQ_new,
                                            bestCluster = cluster
                                    END
                            END,
                            IF s.@cid != bestCluster THEN 
                                    @@totIncidentCluster += (s.@cid -> (-1 * s.@weight)),
                                    @@totIncidentCluster += (bestCluster -> s.@weight),
                                    s.@cid = bestCluster
                            END,
                            s.@weightToCluster.clear();
                last_modularity = @@modularity;
                @@modularity = 0;
                T1 = SELECT s
                     FROM Start:s-((following|reverse_following):e)-:t
                     WHERE s.@cid == t.@cid
                     ACCUM @@modularity += 1 - s.@weight * t.@weight / (@@totalWeight);
                @@modularity = @@modularity / @@totalWeight;                      
                // PRINT iteration AS Phase3Iter, @@modularity;
                log(debug > 0, "[redrain]#refine", iteration, @@modularity);
        END;
        
                
        //Print Start [Start.@cid];
        Start = {user.*};
        Start = SELECT s FROM Start:s
                POST-ACCUM @@clusterSizes += (s.@cid -> 1),s.communityID=s.@cid
                           ;
        log(TRUE, @@clusterSizes.size());
        IF outputLevel == 0 THEN
                FOREACH (cluster, csize) IN @@clusterSizes DO
                        @@clusterMap += (csize -> 1);
                END;
                FOREACH (csize, number) IN @@clusterMap DO
                        @@clusterDist += ClusterNum(csize, number);
                END;
                PRINT @@clusterDist;
        ELSE
                FOREACH (cluster, csize) IN @@clusterSizes DO
                        @@clusterMembers += (csize -> cluster);
                END;
                PRINT @@clusterMembers;
        END;
}
INTERPRET QUERY algoLouvain(10,10,10,10,0)
//INSTALL QUERY algoLouvain
//RUN QUERY algoLouvain(10,10,10,10,0)


CREATE QUERY recommendVideo(STRING targetUsername, INT minWatchPercent) {
    SetAccum<STRING> @@targetUserTags;
    SetAccum<INT> @@targetUserAudios;
    STRING targetUserCountry;
    INT targetUserCommunity;
    
    SetAccum<STRING> @@commentTags;
    SumAccum<FLOAT> @matchingTagsAndAudios;
    
    SumAccum<FLOAT> @score;

    start = {user.*};
    targetUser = SELECT s 
                 FROM start:s
                 WHERE s.username == targetUsername
                 ACCUM targetUserCountry = s.country,
                       targetUserCommunity = s.communityID;
    
// Fills target user info based on what videos they have watched (only if over half the video is watched)
    watchedVideos = SELECT t
                    FROM targetUser:s -(watched:e)-> video:t
                    WHERE watched.percentWatched >= minWatchPercent;

    fillTags = SELECT t
               FROM watchedVideos:s -(vTag:e) -> tag:t
               ACCUM @@targetUserTags += t.content;
    
    fillAudio = SELECT t
                FROM watchedVideos:s -(vAudio:e) -> audio:t
                ACCUM @@targetUserAudios += t.content;

// Every matching tag/audio in a video adds 2 points
    start = {video.*};
    giveScores = SELECT s
                 FROM start:s -(vTag:e) -> tag:t
                 ACCUM IF @@targetUserTags.contains(t.content) THEN s.@score += 2,
                                                               s.@matchingTagsAndAudios += 1
                                                               END;
                 
    giveScores = SELECT s
                 FROM start:s -(vAudio:e) -> audio:t
                 ACCUM IF @@targetUserAudios.contains(t.content) THEN s.@score += 2,
                                                                      s.@matchingTagsAndAudios += 1
                                                                        END;

// Bonus point if 2 or more tags match the user's preference
    giveBonusForSimilar = SELECT s
                          FROM start:s
                          WHERE s.@matchingTagsAndAudios > 1
                          ACCUM s.@score += 1;
                           
// Add 0.5 points for same country as user               
    giveBonusForCountry = SELECT s
                          FROM start:s
                          WHERE targetUserCountry == s.country
                          ACCUM s.@score += 0.5;
                          
// Add 0.5 points if user commented on a similar video already
    commentedVideos = SELECT t
                      FROM targetUser:s - (watched:e) -> video:t
                      WHERE watched.commented;
    
    commentTags = SELECT t
                  FROM commentedVideos:s - (vTag:e) -> tag:t
                  ACCUM @@commentTags += t.content;
                  
    giveBonusForComment = SELECT s
                          FROM start:s - (vTag:e) -> tag:t
                          WHERE @@commentTags.contains(t.content)
                          ACCUM s.@score += 0.5;
                          
// Slightly bump points of videos liked/commented on within a user's community
    start = {user.*};
    communityUsers = SELECT s
                     FROM start:s
                     WHERE s.communityID == targetUserCommunity;
    
    communityLiked = SELECT t
                     FROM communityUsers:s - (watched:e) -> video:t
                     WHERE watched.liked
                     ACCUM t.@score += 0.5;
    
    communityCommented = SELECT t
                         FROM communityUsers:s - (watched:e) -> video:t
                         WHERE watched.commented
                         ACCUM t.@score += 0.5;

// If the user has liked a video, slightly increase points of videos liked by other users 
// (who also liked this video)
    likedVideos = SELECT t
                  FROM targetUser:s - (watched:e) -> video:t
                  WHERE watched.liked;
    
    relatedUsers = SELECT t
                   FROM likedVideos:s - (watched:e) -> user:t
                   WHERE watched.liked;
    
    relatedVideos = SELECT t
                    FROM relatedUsers:s - (watched:e) -> video:t
                    WHERE watched.liked
                    ACCUM t.@score += 0.25;

// If the user has commented on a video, slightly increase points of videos commented on by other users 
// (who also commented on this video)
    commentedVideos = SELECT t
                      FROM targetUser:s - (watched:e) -> video:t
                      WHERE watched.commented;
    
    relatedUsers = SELECT t
                   FROM likedVideos:s - (watched:e) -> user:t
                   WHERE watched.commented;
    
    relatedVideos = SELECT t
                    FROM relatedUsers:s - (watched:e) -> video:t
                    WHERE watched.commented
                    ACCUM t.@score += 0.25;

// Reset score (to zero) for all previously watched videos (so they are not recommended)
    watchedVideos = SELECT t
                    FROM targetUser:s -(watched:e)-> video:t;
    
    fixWatchedVideos = SELECT s
                       FROM watchedVideos:s
                       ACCUM s.@score = -1;

// Orders all videos from highest points (for this exact user) to lowest points
    start = {video.*};
    output = SELECT s
             FROM start:s
             ORDER BY s.@score DESC; // Sorting requires INSTALL of query (not INTERPRET)
    
    PRINT output;
}
//INTERPRET QUERY recommendVideo("leo", 50)
INSTALL QUERY recommendVideo
RUN QUERY recommendVideo("leo",50)